C51 COMPILER V9.56.0.0   KEY                                                               08/04/2020 18:58:19 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\output\key.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\HAEDWARE\Key\key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..
                    -\source;..\HAEDWARE\Flash;..\HAEDWARE\DELAY;..\HAEDWARE\HT1621B;..\HAEDWARE\Uart;..\HAEDWARE\Key;..\HAEDWARE\Timer;..\HA
                    -EDWARE\Pwm;..\HAEDWARE\ADC;..\HAEDWARE\WDT) DEBUG OBJECTEXTEND PRINT(.\Listings\key.lst) TABS(2) OBJECT(.\output\key.obj
                    -)

line level    source

   1          #include "key.h"
   2          #include "delay.h"
   3          u8 calibration_std = 0;
   4          #define KEY_PRESS_TIME 700
   5          
   6          void key_init(void)
   7          {
   8   1        P3M5 = 0x61;                        //P35设置为非施密特数字带上拉输入
   9   1        P2M5 = 0x61;                        //P25设置为非施密特数字带上拉输入
  10   1        P2M6 = 0x61;                        //P26设置为非施密特数字带上拉输入
  11   1        P0M2 = 0x61;                        //P02设置为非施密特数字带上拉输入
  12   1      }
  13          
  14          
  15          static unsigned char key_driver(void) 
  16          {     
  17   1          static unsigned char key_state = 0;         
  18   1          static unsigned int key_time = 0;           
  19   1          unsigned char key_press, key_return; 
  20   1       
  21   1          key_return = N_KEY;                         
  22   1       
  23   1           key_press = KEY_1; 
  24   1          switch (key_state)     
  25   1          {       
  26   2              case KEY_STATE_0:                       
  27   2                  if (key_press == 0)                     
  28   2                  {
  29   3                      key_time = 0;                   
  30   3                      key_state = KEY_STATE_1;       
  31   3                  }        
  32   2                  break;
  33   2       
  34   2              case KEY_STATE_1:                       
  35   2                  if (key_press == 0)                     
  36   2                  {
  37   3                      key_time++;                     
  38   3                      if(key_time>=SINGLE_KEY_TIME)   
  39   3                      {
  40   4                          key_state = KEY_STATE_2;    
  41   4                      }
  42   3              delay_ms(10);
  43   3                  }         
  44   2                  else key_state = KEY_STATE_0;       
  45   2                  break; 
  46   2       
  47   2              case KEY_STATE_2:                       
  48   2                  if(key_press == 1)                       
  49   2                  { 
  50   3                       key_return = KEY_1_SHORT;            
  51   3                       key_state = KEY_STATE_0;       
  52   3                  } 
C51 COMPILER V9.56.0.0   KEY                                                               08/04/2020 18:58:19 PAGE 2   

  53   2                  else
  54   2                  {
  55   3                      key_time++;                     
  56   3       
  57   3                      if(key_time >= LONG_KEY_TIME)   
  58   3                      {
  59   4                          key_return = KEY_1_LONG;         
  60   4                          key_state = KEY_STATE_3;    
  61   4                      }
  62   3              delay_ms(10);
  63   3                  }
  64   2                  break;
  65   2       
  66   2            case KEY_STATE_3:                         
  67   2                if (key_press == 1) 
  68   2                {
  69   3                    key_state = KEY_STATE_0;          
  70   3                }         
  71   2                break; 
  72   2       
  73   2              default:                               
  74   2                  key_state = KEY_STATE_0;
  75   2                  break;
  76   2          }
  77   1       
  78   1          return key_return;                         
  79   1      
  80   1      }
  81          static unsigned char Calibration_key_driver(void) 
  82          {     
  83   1          static unsigned char key_state = 0;         
  84   1          static unsigned int key_time = 0;           
  85   1          unsigned char key_press, key_return; 
  86   1       
  87   1          key_return = N_KEY;                         
  88   1      
  89   1            key_press = KEY_2;
  90   1          switch (key_state)     
  91   1          {       
  92   2              case KEY_STATE_0:                       
  93   2                  if (key_press == 0)                     
  94   2                  {
  95   3                      key_time = 0;                   
  96   3                      key_state = KEY_STATE_1;       
  97   3                  }        
  98   2                  break;
  99   2       
 100   2              case KEY_STATE_1:                       
 101   2                  if (key_press == 0)                     
 102   2                  {
 103   3                      key_time++;                     
 104   3                      if(key_time>=SINGLE_KEY_TIME)   
 105   3                      {
 106   4                          key_state = KEY_STATE_2;    
 107   4                      }
 108   3              delay_ms(10);
 109   3                  }         
 110   2                  else key_state = KEY_STATE_0;       
 111   2                  break; 
 112   2       
 113   2              case KEY_STATE_2:                       
 114   2                  if(key_press == 1)                       
C51 COMPILER V9.56.0.0   KEY                                                               08/04/2020 18:58:19 PAGE 3   

 115   2                  { 
 116   3                       key_return = KEY_1_SHORT;            
 117   3                       key_state = KEY_STATE_0;       
 118   3                  } 
 119   2                  else
 120   2                  {
 121   3                      key_time++;                     
 122   3       
 123   3                      if(key_time >=  LONG_KEY_CALI_TIME)   
 124   3                      {
 125   4                          key_return = KEY_CALI2_LONG;         
 126   4                          key_state = KEY_STATE_3;    
 127   4                      }
 128   3              delay_ms(10);
 129   3                  }
 130   2                  break;
 131   2       
 132   2            case KEY_STATE_3:                         
 133   2                if (key_press == 1) 
 134   2                {
 135   3                    key_state = KEY_STATE_0;          
 136   3                }         
 137   2                break; 
 138   2       
 139   2              default:                               
 140   2                  key_state = KEY_STATE_0;
 141   2                  break;
 142   2          }
 143   1       
 144   1          return key_return;                         
 145   1      
 146   1      }
 147          
 148          u8 key_scan(void)
 149          {
 150   1        static u8 key_up = 1;
 151   1        static u16 key_pres_time = 0;
 152   1      
 153   1      
 154   1        if(key_driver() == KEY_1_LONG)
 155   1        {
 156   2            return KEY_1_PRES;
 157   2        }
 158   1        if(Calibration_key_driver() ==  KEY_CALI2_LONG)
 159   1        {
 160   2          calibration_std = 1;
 161   2        }
 162   1        else if(key_up && (KEY_2 == 0 || KEY_3 == 0)&&(calibration_std == 0))
 163   1        {
 164   2          delay_ms(50); 
 165   2          key_up=0;
 166   2          if(KEY_2 == 0)
 167   2            return KEY_3_PRES; 
 168   2          else if(KEY_3 == 0)
 169   2            return KEY_2_PRES;
 170   2        }else if(KEY_2 == 1 && KEY_3 == 1)
 171   1          key_up=1;   
 172   1      
 173   1        if(KEY_1 == 1 && key_pres_time > 1)
 174   1          key_pres_time = 0;
 175   1        return 0;
 176   1      }
C51 COMPILER V9.56.0.0   KEY                                                               08/04/2020 18:58:19 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    483    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
